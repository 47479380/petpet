plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.6.20'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.6.20'

    id 'net.mamoe.mirai-console' version '2.11.0'
}

apply plugin: "maven-publish"
apply plugin: "java"


group = 'xmmt.dituon'
version = '5.4'

def dataPath = 'data/xmmt.dituon.petpet'
def fontsPathName = 'fonts'

repositories {
    maven { url 'https://maven.aliyun.com/repository/public' }
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.4'
    annotationProcessor 'org.projectlombok:lombok:1.18.4'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.3'
    implementation "com.madgag:animated-gif-lib:1.4"
    implementation "net.coobird:thumbnailator:0.4.19"

    implementation "org.java-websocket:Java-WebSocket:1.5.3"

    testImplementation "junit:junit:4.11"
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}
mirai { jvmTarget = JavaVersion.VERSION_11 }

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set("sources")
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            // useless for jitpack: groupId = GROUP
            artifactId = "petpet-share"
            // useless for jitpack: version = VERSION

            from components.java
        }
    }
}

jar {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': 'moe.dituon.petpet.Main'
    }
    from {
        (configurations.runtimeClasspath).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

task wsJar(type: Jar) {
    group = 'build'
    description = 'build jar, excluding the websocket lib & webui'
    archiveClassifier.set("no-ws")

    exclude '**/petpet/websocket/**'
    exclude '**/org/java_websocket/**'
    exclude '**/index.html'

    manifest {
        attributes 'Main-Class': 'moe.dituon.petpet.Main'
    }

    with jar
}

task generateIndexJson {
    def dataSubDirs = new File("$rootDir/$dataPath")
            .listFiles({ file -> file.isDirectory() && file.name != fontsPathName } as FileFilter)
    def dataTemplateNames = dataSubDirs.collect({ dir -> "\"${dir.getName()}\"" }).join(",\n    ")

    def fontsNames = new File("$rootDir/$dataPath/$fontsPathName")
            .listFiles({ file -> file.isFile() } as FileFilter).collect({ file -> "\"${file.getName()}\"" }).join(",\n    ")

    def jsonData = new StringBuilder()
    jsonData.append("{\n")
    jsonData.append("  \"version\": ${project.version},\n")
    jsonData.append("  \"dataList\": [\n    $dataTemplateNames\n  ],\n")
    jsonData.append("  \"fontList\": [\n    $fontsNames\n  ]\n")
    jsonData.append("}")

    def indexJsonFile = new File("$rootDir/index.json")
    indexJsonFile.write(jsonData.toString())

    def indexMapData = [:]
    dataSubDirs.each { dir ->
        def fileCount = dir.listFiles({ file ->
            file.isFile() && file.getName().endsWith(".png")
        } as FileFilter)?.length ?: 0
        indexMapData.put(dir.getName(), fileCount)
    }
    def indexMapJsonData = new StringBuilder()
    indexMapJsonData.append("{\n")
    indexMapData.each { directory, fileCount ->
        indexMapJsonData.append("  \"$directory\": $fileCount,\n")
    }
    if (indexMapData) {
        indexMapJsonData.delete(indexMapJsonData.length() - 2, indexMapJsonData.length() - 1) // Remove trailing comma
    }
    indexMapJsonData.append("}")

    def indexMapJsonFile = new File("$rootDir/index.map.json")
    indexMapJsonFile.write(indexMapJsonData.toString())
}

mirai {
    excludeDependency("org.java-websocket", "Java-WebSocket")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}